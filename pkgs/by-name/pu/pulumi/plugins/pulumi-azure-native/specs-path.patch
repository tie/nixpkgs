This change fixes schema generation when specifications path contains
dots (e.g. /build/pulumi-azure-native-2.88.0/azure-rest-api-specs/â€¦).

In particular, this affects Nix on Darwin that builds under paths like
/private/tmp/nix-build-pulumi-azure-native-2.88.0.drv-0/pulumi-azure-native

See also https://github.com/pulumi/pulumi-azure-native/pull/3968

--- a/pkg/resources/resources.go
+++ b/pkg/resources/resources.go
@@ -282,9 +282,9 @@ func GetModuleName(majorVersion uint64, filePath, apiUri string) (ModuleNaming,
 	// We extract the module name from two sources:
 	// - from the folder name of the Open API spec
 	// - from the URI of the API endpoint (we take the last namespace in the URI)
-	specFolderName := getSpecFolderName(filePath)
+	specFolderName, specFilePath := getSpecFolderNameAndFilePath(filePath)
 	namespaceWithoutPrefixFromSpecFilePath := findNamespaceWithoutPrefixFromPath(filePath, "")
-	namespace, err := findSpecNamespace(filePath)
+	namespace, err := findSpecNamespace(specFilePath)
 	if err != nil {
 		return ModuleNaming{}, err
 	}
@@ -418,15 +418,16 @@ func findNamespaceWithoutPrefixFromPath(path, defaultValue string) string {
 	return defaultValue
 }
 
-var folderModulePattern = regexp.MustCompile(`.*/specification/([a-zA-Z-]+)/resource-manager/.*`)
+var folderModulePattern = regexp.MustCompile(`.*/specification/([a-zA-Z-]+)/resource-manager/(.*)`)
 
-func getSpecFolderName(path string) string {
+func getSpecFolderNameAndFilePath(path string) (string, string) {
 	subMatches := folderModulePattern.FindStringSubmatch(path)
-	if len(subMatches) > 1 {
+	if len(subMatches) > 2 {
 		moduleAlias := subMatches[1]
-		return moduleAlias
+		filePath := subMatches[2]
+		return moduleAlias, filePath
 	}
-	return ""
+	return "", ""
 }
 
 var verbReplacer = strings.NewReplacer(
